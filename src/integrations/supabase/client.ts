
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://kbvxdntjyatvcpaxkmrj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtidnhkbnRqeWF0dmNwYXhrbXJqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA5MDAzMTAsImV4cCI6MjA1NjQ3NjMxMH0.lDe0h88k7H5qxcwuYLJDcpmYnA0l2OCsIFWmwAP-Xo0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Enhanced security configuration with OAuth providers support
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: 'pkce', // More secure flow type
    storageKey: 'linok-secure-auth', // Custom storage key for better identification
  }
});

// Helper functions for authentication
export const signInWithEmail = async (email: string, password: string) => {
  return await supabase.auth.signInWithPassword({ email, password });
};

export const signUpWithEmail = async (
  email: string, 
  password: string, 
  metadata: Record<string, any> = {}
) => {
  return await supabase.auth.signUp({ 
    email, 
    password,
    options: { 
      data: metadata 
    }
  });
};

export const signInWithGoogle = async () => {
  return await supabase.auth.signInWithOAuth({
    provider: 'google',
    options: {
      redirectTo: `${window.location.origin}/auth`,
      queryParams: {
        access_type: 'offline',
        prompt: 'consent',
      }
    }
  });
};

export const signInWithApple = async () => {
  return await supabase.auth.signInWithOAuth({
    provider: 'apple',
    options: {
      redirectTo: `${window.location.origin}/auth`,
    }
  });
};

export const resetPassword = async (email: string) => {
  return await supabase.auth.resetPasswordForEmail(email, {
    redirectTo: `${window.location.origin}/reset-password`,
  });
};

export const signOut = async () => {
  return await supabase.auth.signOut();
};

export const getCurrentSession = async () => {
  return await supabase.auth.getSession();
};

export const getCurrentUser = async () => {
  const { data } = await supabase.auth.getUser();
  return data?.user;
};

// Helper function to safely get store data without encryption errors
export const getStoreData = async (userId: string) => {
  try {
    const { data, error } = await supabase
      .from('stores')
      .select('*')
      .eq('user_id', userId)
      .maybeSingle();
      
    if (error) {
      console.error("Error fetching store data:", error);
      return { data: null, error };
    }
    
    return { data, error: null };
  } catch (error) {
    console.error("Error in getStoreData function:", error);
    return { data: null, error };
  }
};

// Helper function to get categories by store ID
export const getCategoriesByStoreId = async (storeId: string) => {
  try {
    const { data, error } = await supabase
      .from('categories')
      .select('*')
      .eq('store_id', storeId)
      .order('display_order', { ascending: true, nullsLast: true });
      
    if (error) {
      console.error("Error fetching categories:", error);
      return { data: null, error };
    }
    
    return { data, error: null };
  } catch (error) {
    console.error("Error in getCategoriesByStoreId function:", error);
    return { data: null, error };
  }
};

// Helper function to update product category
export const updateProductCategory = async (productId: string, categoryId: string | null) => {
  try {
    const { data, error } = await supabase
      .from('products')
      .update({ category_id: categoryId })
      .eq('id', productId)
      .select();
      
    if (error) {
      console.error("Error updating product category:", error);
      return { data: null, error };
    }
    
    return { data, error: null };
  } catch (error) {
    console.error("Error in updateProductCategory function:", error);
    return { data: null, error };
  }
};
